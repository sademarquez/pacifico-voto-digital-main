
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 
  (typeof window !== 'undefined' && (window as any).GEMINI_API_KEY);

const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent';

interface GeminiRequest {
  contents: {
    parts: {
      text: string;
    }[];
  }[];
  generationConfig?: {
    temperature?: number;
    topK?: number;
    topP?: number;
    maxOutputTokens?: number;
  };
}

interface VoterProfile {
  nombre: string;
  edad?: number;
  profesion?: string;
  barrio?: string;
  intereses?: string;
  genero?: string;
  estrato?: number;
  ubicacion?: string;
}

interface CandidateInfo {
  nombre: string;
  cargo: string;
  propuestas: any;
  partido?: string;
}

export class GeminiElectoralService {
  private apiKey: string;
  private isConfigured: boolean;

  constructor() {
    this.apiKey = GEMINI_API_KEY || '';
    this.isConfigured = !!this.apiKey;
    
    if (this.isConfigured) {
      console.log('‚úÖ Gemini API configurada correctamente');
    } else {
      console.warn('‚ö†Ô∏è Gemini API key not found. Verifica la configuraci√≥n.');
    }
  }

  async makeRequest(prompt: string, config?: any): Promise<string> {
    if (!this.isConfigured) {
      console.warn('üîß Gemini API not configured, returning fallback response');
      return this.getFallbackResponse(prompt);
    }

    const request: GeminiRequest = {
      contents: [{
        parts: [{ text: prompt }]
      }],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 1024,
        ...config
      }
    };

    try {
      console.log('üöÄ Enviando request a Gemini API...');
      const response = await fetch(`${GEMINI_API_URL}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Gemini API error:', response.status, errorText);
        throw new Error(`Gemini API error: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json();
      const result = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
      
      if (!result) {
        throw new Error('Empty response from Gemini API');
      }
      
      console.log('‚úÖ Respuesta exitosa de Gemini API');
      return result;
    } catch (error) {
      console.error('‚ùå Error calling Gemini API:', error);
      return this.getFallbackResponse(prompt);
    }
  }

  private getFallbackResponse(prompt: string): string {
    if (prompt.includes('mensaje de campa√±a') || prompt.includes('personalizado')) {
      return `üéØ Estimado ciudadano, te invitamos a conocer nuestras propuestas para transformar nuestro territorio. Tu participaci√≥n es fundamental para el cambio que necesitamos. ¬°√önete a MI CAMPA√ëA 2025!`;
    }
    
    if (prompt.includes('sentiment') || prompt.includes('an√°lisis')) {
      return JSON.stringify({
        score: 0.7,
        level: 'positivo',
        emotions: ['inter√©s', 'expectativa', 'confianza'],
        voterIntent: 'positiva',
        concerns: ['propuestas espec√≠ficas', 'transparencia'],
        engagementLevel: 8
      });
    }
    
    if (prompt.includes('bienvenida')) {
      return `¬°Bienvenido a MI CAMPA√ëA 2025! üöÄ Aqu√≠ encontrar√°s propuestas reales, transparencia total y un compromiso genuino con el cambio. Tu voz importa y tu voto puede transformar nuestra realidad.`;
    }
    
    if (prompt.includes('asistente')) {
      return `Como tu estratega electoral powered by IA, estoy aqu√≠ para maximizar el impacto de tu campa√±a. An√°lisis predictivo, mensajes que convierten, y automatizaci√≥n que garantiza resultados. ¬øC√≥mo aseguramos tu victoria?`;
    }
    
    return `¬°Gracias por tu inter√©s en MI CAMPA√ëA 2025! Estamos construyendo el futuro juntos con tecnolog√≠a de vanguardia y compromiso real. üéØ`;
  }

  async generatePersonalizedCampaignMessage(voterProfile: VoterProfile, candidateInfo: CandidateInfo): Promise<string> {
    const prompt = `
    Eres el estratega electoral IA m√°s avanzado de Colombia para MI CAMPA√ëA 2025.
    
    Genera un mensaje de WhatsApp ULTRAPERSONALIZADO para convertir a este votante:
    
    PERFIL DEL VOTANTE:
    - Nombre: ${voterProfile.nombre}
    - Edad: ${voterProfile.edad || 'No especificada'}
    - Profesi√≥n: ${voterProfile.profesion || 'No especificada'}
    - Barrio: ${voterProfile.barrio || 'No especificado'}
    - Estrato: ${voterProfile.estrato || 'No especificado'}
    - G√©nero: ${voterProfile.genero || 'No especificado'}
    
    CANDIDATO:
    - Nombre: ${candidateInfo.nombre}
    - Cargo: ${candidateInfo.cargo}
    - Partido: ${candidateInfo.partido || 'Independiente'}
    - Propuestas: ${JSON.stringify(candidateInfo.propuestas)}
    
    INSTRUCCIONES CLAVE:
    - M√°ximo 140 caracteres (WhatsApp optimizado)
    - Tono cercano, aut√©ntico y persuasivo
    - SIEMPRE usar el nombre del votante
    - Menciona UNA propuesta espec√≠fica relevante para su perfil
    - Call-to-action que genere engagement inmediato
    - Lenguaje colombiano natural
    - Evita promesas irreales
    - Genera urgencia positiva
    
    OBJETIVO: Convertir este mensaje en VOTO SEGURO
    
    FORMATO: Solo el mensaje WhatsApp, sin explicaciones.
    `;

    return await this.makeRequest(prompt);
  }

  async analyzeSentiment(message: string): Promise<{
    score: number;
    level: string;
    emotions: string[];
    voterIntent: string;
    concerns: string[];
    engagementLevel: number;
  }> {
    const prompt = `
    Eres el analizador de sentimientos electoral m√°s preciso de Colombia.
    
    Analiza este mensaje de un VOTANTE REAL:
    "${message}"
    
    AN√ÅLISIS ELECTORAL PROFUNDO:
    1. Score de sentiment (-1 a 1): precisi√≥n quir√∫rgica
    2. Nivel: muy_negativo, negativo, neutral, positivo, muy_positivo
    3. Emociones detectadas (m√°ximo 3, las m√°s relevantes)  
    4. Intenci√≥n de voto: negativa, neutral, indecisa, positiva, comprometida
    5. Preocupaciones espec√≠ficas mencionadas
    6. Nivel de engagement electoral (1-10)
    
    CONTEXTO: MI CAMPA√ëA 2025 - Revoluci√≥n Electoral con IA
    
    Responde SOLO en JSON v√°lido:
    {
      "score": 0.0,
      "level": "nivel",
      "emotions": ["emocion1", "emocion2"],
      "voterIntent": "intencion",
      "concerns": ["preocupacion1"],
      "engagementLevel": numero
    }
    `;

    try {
      const response = await this.makeRequest(prompt);
      const cleanResponse = response.replace(/```json|```/g, '').trim();
      return JSON.parse(cleanResponse);
    } catch (error) {
      console.error('Error parsing sentiment analysis:', error);
      return {
        score: 0.5,
        level: 'neutral',
        emotions: ['expectativa'],
        voterIntent: 'neutral',
        concerns: ['informaci√≥n adicional'],
        engagementLevel: 6
      };
    }
  }

  async generateAutomatedResponse(voterMessage: string, candidateInfo: CandidateInfo): Promise<string> {
    const prompt = `
    Eres el bot electoral m√°s inteligente de Colombia para MI CAMPA√ëA 2025.
    
    MENSAJE DEL VOTANTE:
    "${voterMessage}"
    
    INFORMACI√ìN DEL CANDIDATO:
    - Nombre: ${candidateInfo.nombre}
    - Cargo: ${candidateInfo.cargo}
    - Propuestas: ${JSON.stringify(candidateInfo.propuestas)}
    
    INSTRUCCIONES ESTRAT√âGICAS:
    - Respuesta emp√°tica que CONECTE emocionalmente
    - Aborda ESPEC√çFICAMENTE sus preocupaciones
    - Proporciona informaci√≥n CONCRETA y verificable
    - Invita al di√°logo constructivo
    - M√°ximo 180 caracteres para WhatsApp
    - Tono profesional pero humano
    - Genera CONFIANZA y CREDIBILIDAD
    - Call-to-action sutil pero efectivo
    
    OBJETIVO: Convertir preocupaci√≥n en APOYO ELECTORAL
    
    FORMATO: Solo la respuesta autom√°tica, sin explicaciones.
    `;

    return await this.makeRequest(prompt);
  }

  async optimizeCampaignStrategy(metricsData: any): Promise<{
    recommendations: string[];
    targetAudience: string[];
    messageOptimization: string;
    budgetSuggestions: string;
  }> {
    const prompt = `
    Eres el estratega electoral IA m√°s exitoso de Colombia.
    
    M√âTRICAS ACTUALES DE MI CAMPA√ëA 2025:
    ${JSON.stringify(metricsData, null, 2)}
    
    AN√ÅLISIS ESTRAT√âGICO AVANZADO:
    Proporciona optimizaciones que GARANTICEN VICTORIA ELECTORAL:
    
    1. RECOMENDACIONES T√ÅCTICAS (5 acciones espec√≠ficas de alto impacto)
    2. AUDIENCIAS OBJETIVO (segmentos con mayor potencial de conversi√≥n)
    3. OPTIMIZACI√ìN DE MENSAJES (estrategia de comunicaci√≥n ganadora)
    4. DISTRIBUCI√ìN DE PRESUPUESTO (ROI electoral m√°ximo)
    
    CONTEXTO: Campa√±a electoral colombiana, tecnolog√≠a IA avanzada
    OBJETIVO: Dominancia electoral completa
    
    Responde en JSON:
    {
      "recommendations": ["accion1", "accion2", "accion3", "accion4", "accion5"],
      "targetAudience": ["audiencia1", "audiencia2", "audiencia3"],
      "messageOptimization": "estrategia_de_mensajes_ganadora",
      "budgetSuggestions": "distribucion_presupuesto_optima"
    }
    `;

    try {
      const response = await this.makeRequest(prompt);
      const cleanResponse = response.replace(/```json|```/g, '').trim();
      return JSON.parse(cleanResponse);
    } catch (error) {
      console.error('Error parsing campaign optimization:', error);
      return {
        recommendations: [
          'Activar campa√±as micro-dirigidas por WhatsApp',
          'Implementar an√°lisis predictivo de votantes indecisos',
          'Optimizar presencia en redes sociales con contenido viral',
          'Activar l√≠deres de opini√≥n en territorios clave',
          'Automatizar seguimiento post-evento con IA'
        ],
        targetAudience: [
          'Votantes indecisos entre 25-45 a√±os',
          'Profesionales urbanos con inter√©s social',
          'L√≠deres comunitarios influyentes'
        ],
        messageOptimization: 'Personalizaci√≥n extrema por demograf√≠a, psicograf√≠a y ubicaci√≥n. Mensajes que conecten emocionalmente y generen acci√≥n inmediata.',
        budgetSuggestions: 'Redistribuir: 45% canales digitales, 35% eventos presenciales estrat√©gicos, 20% automatizaci√≥n IA y an√°lisis predictivo'
      };
    }
  }

  async generateWelcomeMessage(voterData?: Partial<VoterProfile>): Promise<string> {
    const prompt = `
    Eres el bot de bienvenida m√°s persuasivo de MI CAMPA√ëA 2025.
    
    NUEVO VISITANTE EN LA PLATAFORMA:
    ${voterData ? `
    - Nombre: ${voterData.nombre || 'Ciudadano'}
    - Ubicaci√≥n: ${voterData.ubicacion || voterData.barrio || 'Colombia'}` : 'Primera visita - perfil desconocido'}
    
    INSTRUCCIONES DE BIENVENIDA:
    - Tono ultra-acogedor y motivacional
    - Explica brevemente el PODER de la plataforma
    - Invita a participar SIN presi√≥n
    - M√°ximo 100 caracteres
    - Lenguaje inclusivo y esperanzador
    - Genera CURIOSIDAD y ENGAGEMENT
    
    OBJETIVO: Primera impresi√≥n EXTRAORDINARIA
    
    FORMATO: Solo el mensaje de bienvenida perfecto.
    `;

    return await this.makeRequest(prompt);
  }

  async generateAssistantResponse(userMessage: string, userRole: string, userName: string): Promise<string> {
    const prompt = `
    Eres el ASISTENTE ELECTORAL IA m√°s avanzado del mundo para MI CAMPA√ëA 2025.
    
    CONTEXTO DEL USUARIO:
    - Nombre: ${userName}
    - Rol: ${userRole}
    - Pregunta: "${userMessage}"
    
    CONTEXTO DE LA PLATAFORMA:
    - Sistema electoral revolucionario con IA al 120%
    - Automatizaci√≥n completa: gesti√≥n de votantes, an√°lisis de sentimientos, m√©tricas en tiempo real
    - Capacidades √∫nicas: mensajes personalizados que convierten, optimizaci√≥n predictiva, ROI +280%
    - Integraci√≥n total con Gemini AI para dominancia electoral
    - SellerChat + WhatsApp + Make para automatizaci√≥n 24/7
    
    INSTRUCCIONES PARA RESPUESTA MAGISTRAL:
    - Responde como el estratega electoral m√°s exitoso del mundo
    - Adapta completamente la respuesta al rol ${userRole}
    - Proporciona consejos T√ÅCTICOS y 100% accionables
    - Tono profesional pero cercano y motivacional
    - Menciona funcionalidades espec√≠ficas cuando sea relevante
    - M√°ximo 200 palabras con impacto m√°ximo
    - Usa emojis estrat√©gicamente para engagement
    - Genera CONFIANZA y demuestra EXPERTISE
    
    OBJETIVO: Respuesta que INSPIRE ACCI√ìN y demuestre el PODER de la IA
    
    FORMATO: Solo la respuesta directa del estratega IA.
    `;

    return await this.makeRequest(prompt, {
      temperature: 0.8,
      maxOutputTokens: 512
    });
  }

  // M√©todo para verificar conectividad
  async testConnection(): Promise<boolean> {
    if (!this.isConfigured) {
      console.log('‚ùå Gemini API key no configurada');
      return false;
    }

    try {
      console.log('üîÑ Probando conexi√≥n con Gemini...');
      const testResponse = await this.makeRequest('Test r√°pido de conectividad. Responde solo: CONECTADO');
      const isConnected = testResponse.length > 0 && !testResponse.includes('fallback');
      
      if (isConnected) {
        console.log('‚úÖ Gemini API conectada correctamente');
      } else {
        console.log('‚ö†Ô∏è Gemini API respondiendo con fallback');
      }
      
      return isConnected;
    } catch (error) {
      console.error('‚ùå Test de conexi√≥n fall√≥:', error);
      return false;
    }
  }

  // M√©todo para obtener estado del servicio
  getServiceStatus(): { configured: boolean; ready: boolean } {
    return {
      configured: this.isConfigured,
      ready: this.isConfigured
    };
  }
}

export const geminiService = new GeminiElectoralService();
